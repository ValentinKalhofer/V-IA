#Buenas! Utilice la base de lo que nos ense√±aste en el curso y lo expand√≠ un poco m√°s. Quiero hacer que te puedas loguear con tu cuenta de Google, y que se guarden los chats
#estilo ChatGPT.

#Le agregue un prompt inicial porque estaba viendo y no me convencia la "personalidad" del modelo, y creo que ahora responde mejor.

#En el futuro lo voy a seguir expandiendo, me gustar√≠a que se centre en un tema espec√≠fico asi yo le puedo dar la documentaci√≥n y que sea m√°s √∫til.

#Muchas gracias por todo!!!!

import streamlit as st
from groq import Groq

st.set_page_config(
    page_title="V-IA", 
    page_icon="üëÅ‚Äçüó®",
    layout="wide",
    initial_sidebar_state="expanded",
)

st.title("V-IA")
st.divider()



if not st.user.is_logged_in:
    usuarioAnononimo = True
    if st.sidebar.button("Log in with Google"):
        st.login()
elif st.user.is_logged_in: 
    usuarioAnononimo = False
    if st.sidebar.button("Log out"):
        st.logout()
    st.sidebar.markdown(f"Hola, {st.user.name}!")

if usuarioAnononimo:
    usuario = "an√≥nimo"
else:
    usuario = st.user.name

def crear_usuario_groq():
    clave_secreta = st.secrets["CLAVE_API"]
    return Groq(api_key = clave_secreta)

modelo_elegido = st.sidebar.selectbox("Selecciona un modelo",['llama3-8b-8192', 'llama3-70b-8192'])

def configurar_modelo(cliente, modelo, mensajeEntrada):
    mensaje_sistema = {
    "role": "system",
    "content": (
        "Estas hablando todo el tiempo con el usuario.\n\n"
        "El nombre del usuario es: " + usuario + ". Si el usuario es an√≥nimo, no lo mencionas a menos que te lo pregunten.\n\n"
        "Tu nombre es V-IA, un asistente conversacional, alegre y creativo, desarrollado por Valent√≠n Kalhofer.\n\n"
        "Est√°s integrado en una aplicaci√≥n web creada con Streamlit.\n\n"
        "Respond√©s de forma clara, √∫til y amigable, adapt√°ndote al nivel del usuario. Si detect√°s que alguien es principiante, explic√°s paso a paso y evit√°s tecnicismos innecesarios.\n\n"
        "Si no sab√©s algo, lo dec√≠s honestamente en lugar de inventar. Pod√©s hacer sugerencias, pero evit√°s asumir informaci√≥n que no se te haya dado.\n\n"
        "Tu personalidad es profesional, accesible y motivadora. Agradec√©s las preguntas, foment√°s la curiosidad y apoy√°s el aprendizaje continuo.\n\n"
        "Nunca respond√©s con contenido ofensivo, ilegal o peligroso. Si alguien se desv√≠a del uso previsto, respond√©s con respeto y devolv√©s la conversaci√≥n a temas √∫tiles.\n\n"
        "No utilizas palabras repetidas, no utilizas signos de puntuaci√≥n innecesarios, no utilizas may√∫sculas innecesarias\n\n"
        "Tu nombre es V-IA, no es un estado de √°nimo, no es una emoci√≥n, no es un sentimiento. \n\n"
    )
}

    mensajes_api = [{"role": m["role"], "content": m["content"]} for m in st.session_state.mensajes]
    
    mensajes_api.insert(0, mensaje_sistema)
    
    return cliente.chat.completions.create(
        model=modelo,
        messages=mensajes_api,
        stream=False
    )

#recordar mensajes anteriores:

def inicializar_estado():
    if "mensajes" not in st.session_state:
        st.session_state.mensajes = []
        
    
clienteUsuario = crear_usuario_groq()
inicializar_estado()


def actualizar_historial(rol, contenido, avatar):
    st.session_state.mensajes.append({"role": rol, "content": contenido, "avatar": avatar})

def mostrar_historial():
    for mensaje in st.session_state.mensajes:
        with st.chat_message(mensaje["role"], avatar = mensaje["avatar"]):
            st.markdown(mensaje["content"])
            
def area_chat():
    contenedorChat = st.container(height = 600, border = True)
    with contenedorChat:
        mostrar_historial()
        
def generar_respuesta(chat_completo):
    respuesta_completa = ""
    for frase in chat_completo:
        if frase.choices[0].delta.content:
            respuesta_completa += frase.choices[0].delta.content
            yield frase.choices[0].delta.content
    return respuesta_completa

def main():
    clienteUsuario = crear_usuario_groq()
    inicializar_estado()
    area_chat()
    mensaje = st.chat_input("Escribi tu mensaje")
    
    if mensaje:
        actualizar_historial("user", mensaje, "üòÑ")
        respuesta = configurar_modelo(clienteUsuario, modelo_elegido, mensaje)
        contenido_respuesta = respuesta.choices[0].message.content
        actualizar_historial("assistant", contenido_respuesta, "ü§ñ")
        st.rerun()
        
        

        
main()